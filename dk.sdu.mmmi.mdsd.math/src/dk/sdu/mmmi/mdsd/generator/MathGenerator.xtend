/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Expression
import dk.sdu.mmmi.mdsd.math.ExternalDef
import dk.sdu.mmmi.mdsd.math.MathExp
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		math.generateFile(fsa)
	}
	
	def void generateFile(MathExp exp, IFileSystemAccess2 access2) {
		access2.generateFile(exp.name + '.java', generateJava(exp))
	}
	
	def generateJava(MathExp exp) {
return '''
package math_expression.test;

public class «exp.name» {

	«FOR v : exp.variables»
	public int «v.name»;
	«ENDFOR»

	«IF exp.externals.size != 0»
	private External external;
	  
	public «exp.name»(External external) {
	  this.external = external;
	}
	«ENDIF»

	public void compute() {
		«FOR v : exp.variables»
		«v.name» = compute«v.name.toFirstUpper»();
		«ENDFOR»
	}
	
	«FOR v : exp.variables»
	private int compute«v.name.toFirstUpper»() {
		«MathGenerator.genComputeFunc(v.expression)»
	}
	«ENDFOR»
	
	«IF exp.externals.size > 0»
	interface External {
		«FOR func : exp.externals»
			int «func.name»(«func.genExtFunc»);
		«ENDFOR»
	}
	«ENDIF»
}
		'''
	}
	
	def String genExtFunc(ExternalDef ext) {
		switch (ext.parameters.size) {
			case 1: {
				return "int a" 
			}
			case 2: {
				return "int a, int b";
			}
			default: {
				return "";
			}
		}
	}
	
	static def String genComputeFunc(Expression exp) {
		return '''return 0;''';
	}
	
}
